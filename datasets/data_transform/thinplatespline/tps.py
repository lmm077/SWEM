"""
Evaluate the thin-plate-spline (TPS) at xy locations arranged in a grid.
"""

# implementation following numpy version:
# https://github.com/vaipatel/morphops/blob/master/morphops/tps.py
# and:
# https://github.com/cheind/py-thin-plate-spline/blob/master/thinplate/pytorch.py


import torch


def _batched_cdist_l2(x1, x2):
    """experimental"""
    x1_norm = x1.pow(2).sum(dim=-1, keepdim=True)
    x2_norm = x2.pow(2).sum(dim=-1, keepdim=True)
    res = torch.baddbmm(
        x2_norm.transpose(-2, -1),
        x1,
        x2.transpose(-2, -1),
        alpha=-2
    ).add_(x1_norm).clamp_min_(1e-30).sqrt_()
    return res


def cdist(x1, x2):
    """For (p1,k)-shaped X and (p2,k)-shaped Y, returns the (p1,p2) matrix
    where the element at [i,j] is the distance between X[i,:] and Y[j,:].
    """
    x1_norm = x1.pow(2).sum(dim=-1, keepdim=True)
    x2_norm = x2.pow(2).sum(dim=-1, keepdim=True)
    res = torch.addmm(
        x2_norm.transpose(-2, -1),
        x1, x2.transpose(-2, -1),
        alpha=-2).add_(x1_norm)
    res = res.clamp_min_(1e-30).sqrt_()
    return res


def K_matrix(X, Y):
    """Calculates the upper-right (p,p) submatrix of the
        (p+k+1,p+k+1)-shaped L matrix.

    Parameters
    ----------
    X : (p,k) array of p points in k dimensions.

    Y : (m,k) array of p points in k dimensions. `Y` must have the
        same k as `X`.

    Returns
    -------
    K : np.ndarray
        A (p,p) array where the element at [i,j] is :
        math:`U(\|X_i - Y_j\|)`. The definition of U depends on k.
    """

    r = cdist(X, Y)
    if X.shape[-1] == 2:
        r_sqd = r * r
        zero = torch.zeros(1, device=r.device)
        r_sqd[torch.isclose(r_sqd, zero)] = 1.0
        return r * r * torch.log(r_sqd)
    return r


def P_matrix(X):
    """Makes the minor diagonal submatrix P of the (p+k+1,p+k+1)-shaped L
    matrix.

    Stacks a column of 1s before the coordinate columns in `X`.

    Parameters
    ----------
    X : (p,k) array of p points in k dimensions.

    Returns
    -------
    P : (p, 1 + k) tensor, which is 1 in the first column, and
        exactly `X` in the remaining columns.
    """

    ones = torch.ones([X.shape[0], 1], device=X.device)
    return torch.cat((ones, X), dim=1)


def L_matrix(X):
    """Makes the (p+k+1,p+k+1)-shaped L matrix that gets inverted when
        calculating the thin-plate spline "from" `X`.

    Parameters
    ----------
    X : (p,k) array of p landmarks in k dimensions for one specimen.

    Returns
    -------
    L : np.ndarray
        A (p+k+1,p+k+1) array of the form [[K | P][P.T | 0]].
    """

    n_coords = X.shape[-1]
    n_lmks = X.shape[-2]
    h = w = n_lmks + n_coords + 1

    K = K_matrix(X, X)
    P = P_matrix(X)
    L = torch.zeros((h, w), device=X.device)
    L[:n_lmks, :n_lmks] = K
    L[:n_lmks, n_lmks:] = P
    L[n_lmks:, :n_lmks] = P.t()
    return L


def tps_coefs(X, Y):
    """Finds the thin-plate spline coefficients for the thin-plate spline
    function that interpolates from X to Y.

    Parameters
    ----------
    X : (p,2) or (p,3) shaped array-like
        A (p,k) array of p points in k=2 or k=3 dimensions.

    Y : (p,2) or (p,3) shaped array-like
        A (p,k) array of p points in k=2 or k=3 dimensions. `Y` must have the
        same shape as `X`.

    Returns
    -------
    W : np.ndarray
        A (p,k) array of weights for the non-affine part of the spline.

    A : np.ndarray
        A (k+1,k) array of weights for the affine part of the spline.
    """

    n_coords = X.shape[-1]
    n_lmks = X.shape[-2]

    zeros = torch.zeros([n_coords + 1, n_coords], device=X.device)
    Y_0 = torch.cat([Y, zeros])

    L = L_matrix(X)
    Q = torch.solve(Y_0, L)[0]

    if torch.any(torch.isnan(Q)):
        # probably want to replace NaNs with a default, rather than raise.
        raise ValueError("The result of L_inv*Y contained NaN values.")

    # return W and A.
    return Q[:n_lmks], Q[n_lmks:]


def tps_warp(X, Y, pts):
    """Maps `pts` to their image under the thin-plate spline function
    generated by :func:`tps_coefs` of `X` and `Y`.

    Parameters
    ----------
    X : (p,k) array of p points in k dimensions.

    Y : (p,k) array of p points in k dimensions. `Y` must have the
        same shape as `X`.

    pts : (m,k) array of m points in k dimensions. `pts` must have the
        same coordinate dimensions k as `X`.

    Returns
    -------
    warped_pts : (m,k) array of points corresponding to the image of `pts`
        under the thin-plate spline produced by `X`, `Y` in the range -1, 1
        this warped grid is suitaable for torch.grid_sample_2d(...).
    """

    W, A = tps_coefs(X, Y)
    U = K_matrix(pts, X)
    P = P_matrix(pts)

    return P @ A + U @ W
